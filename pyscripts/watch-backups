#! /usr/bin/env python3

import re
import json
import urllib.request
import urllib.parse
import os
import getpass
import tempfile
import subprocess

CONFIG = {
        "PARAMS" : [
            ("api_user", "webservices"),
            ("api_pass", "Sparty1855"),
            ("api_action", "ticket_list"),
            ("api_output", "json"),
            ],
        "URL" : "https://www.egr.msu.edu/decs/helpdesk/admin/api.php",
        "SHARE" : "/media/reinstallbackups",
        }

def make_dict_get_params(params):
    result = "?"
    for key,value in params:
        result += "{}={}&".format(urllib.parse.quote(key),urllib.parse.quote(value))
    return result.rstrip("&")

def directories_to_tickets(directories):
    tickets = set()
    ticket_expr = re.compile("^[0-9]+")
    for directory in directories:
        match = ticket_expr.match(directory)
        if match is not None:
            tickets.add(match.group())
    assert len(tickets) > 0, "There are no ticket directories in filer!"
    avg_length = (sum ([ len(ticket) for ticket in tickets ])) / len(tickets)

    tickets = {ticket for ticket in tickets
                if (len(ticket) > (avg_length/2) and 
                    len(ticket) < (avg_length*2)
                    ) 
                }
    return tickets

def query_helpdesk(query_url):
    raw_json = ""
    with urllib.request.urlopen(query_url) as handle:
        raw_json = handle.read().decode('utf-8')
    obj_json = json.loads(raw_json)
    assert obj_json["result_code"] == 1, ("Helpdesk query failed! Result Message: {}"
                                            .format(obj_json["result_message"]))
    return obj_json

def get_backup_tickets(share):
    assert os.path.exists(share), "Path '{}' does not exist!".format(share)
    directories = os.listdir(share)
    tickets = directories_to_tickets(directories)
    return tickets

def get_output(response):
    result = ["id,time,status"]
    for key,ticket in response.items():
        if key.isdigit():
            time = ticket["a_duration"]
            id_ = ticket["id"]
            status = ticket["a_statustitle"]
            result.append("{},{},{}".format(id_, time, status))
    return result

if __name__ == '__main__':
    query_url = (CONFIG["URL"] + make_dict_get_params(CONFIG["PARAMS"]))
    share = CONFIG["SHARE"]
    tickets = get_backup_tickets(share)
    #mount_point = None
    query_url += "&ids=" + urllib.parse.quote(",".join(tickets))
    obj_json = query_helpdesk(query_url)
    print("\n".join(get_output(obj_json)))
