#! /usr/bin/env python3

import socket, argparse
from functools import partial

def get_arguments():
    parser = argparse.ArgumentParser(description="Scan ports for a given host in a given range")
    parser.add_argument("-t","--target",help="The address of the machine to scan",required=True)
    parser.add_argument("-v","--verbose",help="Specify level of verbosity. Can be specified multiple times.",default=0,action="count")
    parser.add_argument("--timeout",help="Set the timeout per request in seconds",default=0.3,type=float)
    port_group = parser.add_mutually_exclusive_group(required=True)
    port_group.add_argument("-r","--range",help="The port range to scan",nargs=2,type=int,metavar=('START','END'))
    port_group.add_argument("-p","--port",help="The port to scan",type=int)
    return parser.parse_args()

def scan_port(target,port):
    s = socket.socket()
    try:
        s.connect((target,port))
        return True
    except ConnectionRefusedError as e:
        return False
    except socket.timeout as e:
        return False

def scan_ports(target,range_):
    scan_target = partial(scan_port,target)
    for port in range_:
        if scan_target(port):
            yield (True,port)
        else:
            yield (False,port)

if __name__ == '__main__':
    args = get_arguments()
    socket.setdefaulttimeout(args.timeout)
    start, end = args.range if args.port is None else (args.port,args.port)
    end += 1
    assert start >= 0 and start <= 65536, "Start must be in range 0-65535"
    assert end >= 0 and end <= 65536, "End must be in range 0-65535"
    assert start <= end, "Range start must be smaller than end!"

    for success,port in scan_ports(args.target, range(start,end)):
        if success:
            if args.verbose > 0:
                print("Port {} is open for tcp traffic".format(port))
            else:
                print("{}".format(port))
        elif not success and args.verbose > 1:
            print("Port {} is closed for tcp traffic".format(port))


